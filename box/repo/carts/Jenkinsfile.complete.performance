@Library('dynatrace@v1.0') _
@Library('keptn-library@3.3')
import sh.keptn.Keptn
def keptn = new sh.keptn.Keptn()

pipeline {
  agent {
    label 'git'
  }

  parameters {
    string(name: 'KEPTN_PROJECT', defaultValue: 'acl-sockshop', description: 'The name of the application.', trim: true)
    string(name: 'KEPTN_SERVICE', defaultValue: 'carts', description: 'The name of the service', trim: true)
    string(name: 'KEPTN_STAGE', defaultValue: 'dev', description: 'The name of the environment.', trim: true)
    string(name: 'KEPTN_MONITORING', defaultValue: 'dynatrace', description: 'Name of monitoring provider.', trim: true)
    string(name: 'KEPTN_DIR', defaultValue: 'keptn/', description: 'keptn shipyard file location', trim: true)
    string(name: 'JMETER_VUCOUNT', defaultValue: '5', description: 'Number of virtual users', trim: true)
    string(name: 'JMETER_LOOPCOUNT', defaultValue: '500', description: 'Number of loops', trim: true)
  }

  environment {
    APP_NAME = "carts"
    KEPTN_SHIPYARD = "${KEPTN_DIR}${KEPTN_SERVICE}-shipyard.yaml"
    KEPTN_SLI = "${KEPTN_DIR}${KEPTN_SERVICE}-sli.yaml"
    KEPTN_SLO = "${KEPTN_DIR}${KEPTN_SERVICE}-slo.yaml"
    KEPTN_DT_CONF = "${KEPTN_DIR}${KEPTN_MONITORING}.conf.yaml"
    KEPTN_ENDPOINT = credentials('keptn-endpoint')
    KEPTN_API_TOKEN = credentials('keptn-api-token')
    KEPTN_BRIDGE = credentials('keptn-bridge')
  }

  stages {

    stage ('Checkout') {
      steps{
        script{
          println '**********************************************************************'
          checkout scm
        }
      }
    }

    stage('Keptn Init') {
      steps{
        script {
          keptn.keptnInit project:"${KEPTN_PROJECT}", service:"${KEPTN_SERVICE}", stage:"${KEPTN_STAGE}", monitoring:"${KEPTN_MONITORING}", shipyard: "${KEPTN_SHIPYARD}"
          keptn.keptnAddResources("${KEPTN_SLI}",'dynatrace/sli.yaml')
          keptn.keptnAddResources("${KEPTN_SLO}",'slo.yaml')
          keptn.keptnAddResources("${KEPTN_DT_CONF}",'dynatrace/dynatrace.conf.yaml')          
        }
      }
    } // end stage

    stage('Warm up') {
      steps {
        container('jmeter') {
          script {
            def status = executeJMeter ( 
              scriptName: "jmeter/${env.APP_NAME}_perfcheck.jmx",
              resultsDir: "PerfCheck_Warmup_${env.APP_NAME}_${env.VERSION}_${BUILD_NUMBER}",
              serverUrl: "${env.APP_NAME}.${env.KEPTN_STAGE}",  
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 10,
              LTN: "PerfCheck_Warmup_${BUILD_NUMBER}",
              funcValidation: false,
              avgRtValidation: 4000
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Performance check failed."
            }
          }
        }
      }
    } // end stage

    stage('Run Performance Test') {
      steps {
        script {
            keptn.markEvaluationStartTime()
        }
        container('jmeter') {
          script {
            def status = executeJMeter ( 
              scriptName: "jmeter/${env.APP_NAME}_perfcheck.jmx",
              resultsDir: "PerfCheck_${env.APP_NAME}_${env.VERSION}_${BUILD_NUMBER}",
              serverUrl: "${env.APP_NAME}.${env.KEPTN_STAGE}", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: JMETER_VUCOUNT.toInteger(),
              loopCount: JMETER_LOOPCOUNT.toInteger(),
              LTN: "PerfCheck_${BUILD_NUMBER}",
              funcValidation: false,
              avgRtValidation: 4000
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Performance check failed."
            }
          }
        }
        script {
          def keptnContext = keptn.sendStartEvaluationEvent starttime:"", endtime:""
          echo "Open Keptns Bridge: ${keptn_bridge}/trace/${keptnContext}"
        }
      } 
    } // end stage

    stage('Pipeline Quality Gate') {
      steps {
        script {
          def result = keptn.waitForEvaluationDoneEvent setBuildResult:true, waitTime:'5'
          echo "${result}"
        }
      }
    } // end stage
  } // end stages
} // end pipeline